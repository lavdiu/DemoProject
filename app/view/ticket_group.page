<?php

use Lavdiu\DemoApp\TicketGroup;
use Laf\UI\Component\Dropdown;
use Laf\UI\Component\Link;
use Laf\UI\Container\ContainerType;
use Laf\UI\Form\DrawMode;
use Laf\UI\Form\Form;
use Laf\UI\Page\AdminPage;
use Laf\Util\UrlParser;
use Laf\UI\Container\HtmlContainer;
use Laf\UI\Grid\PhpGrid\PhpGrid;
use Laf\UI\Grid\PhpGrid\Column;
use Laf\UI\Grid\PhpGrid\ActionButton;
use Lavdiu\DemoApp\Factory;
use Laf\UI\Container\Div;
use Laf\UI\Container\TabContainer;
use Laf\UI\Container\TabItem;

$id = UrlParser::getId();
$ticketgroup = new TicketGroup($id);
$form = $ticketgroup->getForm();

/**
$form->setComponents([])
->addComponent($ticketgroup->getIdFormElement())
->addComponent($ticketgroup->getLabelFormElement())
->addComponent($ticketgroup->getCreatedOnFormElement())
->addComponent($ticketgroup->getCreatedByFormElement());
 */
$html = Factory::GeneralPage();
$page = new AdminPage();

$page->setTitle("<a href='" . UrlParser::getListLink() . "' class='text-black text-decoration-none'>Ticket Projects</a>");
$page->setTitleIcon('far fa-list-alt');


if ($form->isSubmitted()) {
    $id = $form->processForm();
    UrlParser::redirectToViewPage($id);
    exit;
}

switch (UrlParser::getAction()) {
    case 'update':
        $page->setContainerType(ContainerType::TYPE_DEFAULT);
        $form->setDrawMode(DrawMode::UPDATE);


        $form->setComponents([])
        ->addComponent($ticketgroup->getIdFormElement())
        ->addComponent($ticketgroup->getLabelFormElement());

        $page->addComponent($form);

        $page->addLink(new Link('Cancel', UrlParser::getViewLink(), 'fas fa-window-close', [], ['btn', 'btn-sm', 'btn-outline-success']));
        $html->addComponent($page);
        echo $html->draw();
        break;
    case 'new':
        $page->setContainerType(ContainerType::TYPE_DEFAULT);


        $form->setComponents([])
        ->addComponent($ticketgroup->getIdFormElement())
        ->addComponent($ticketgroup->getLabelFormElement());

        $form->setDrawMode(DrawMode::INSERT);
        $page->addComponent($form);
        $page->addLink(new Link('Cancel', UrlParser::getListLink(), 'fas fa-window-close', [], ['btn', 'btn-sm', 'btn-outline-success']));
        $html->addComponent($page);
        echo $html->draw();
        break;
    case 'delete':
        if ($ticketgroup->recordExists()) {
            if ($ticketgroup->canSoftDelete()) {
                $ticketgroup->softDelete();
            } else {
                $ticketgroup->hardDelete();
            }
        }
        UrlParser::redirectToListPage();
        break;
    case 'view':
        $page->setContainerType(ContainerType::TYPE_DEFAULT);
        $form->setDrawMode(DrawMode::VIEW);
        $page->addComponent($form);
        $page->addLink(new Link('List', UrlParser::getListLink(), 'far fa-list-alt', [], ['btn', 'btn-sm', 'btn-outline-success']));

        $dd = new Dropdown('Options', '', 'fa fa-cogs', true);
        $dd->addCssClass('btn-outline-success')
            ->addCssClass('btn-sm');
        $newLink = new Link('Update', UrlParser::getUpdateLink(), 'fa fa-edit', ['class' => 'btn btn-sm btn-outline-warning']);
        $deleteLink = new Link('Delete', UrlParser::getDeleteLink(), 'fa fa-trash', ['class' => 'btn btn-sm btn-outline-danger']);
        $deleteLink->setConfirmationMessage('Are you sure you want to delete this?');

        $dd->addLink($newLink)
            ->addLink($deleteLink);
        $page->addLink($dd);
        $html->addComponent($page);

        $tabContainer = new TabContainer();
        $panel = new Div();
        $panel->setContainerType(ContainerType::TYPE_FLUID);



        $ticket = new PhpGrid('ticket_list');
        $ticket->setTitle('Ticket List')
            ->setRowsPerPage(20)
            ->setSqlQuery('
SELECT * FROM (
	SELECT
		  `ticket`.`id` AS ticket_id
		, `ticket`.`subject` AS ticket_subject
		, `person`.`name` AS created_by
		, `ticket`.`created_on` AS ticket_created_on
		, `ticket_status`.`label` AS ticket_status
		, `ticket_category`.`label` AS ticket_category
		, `person_requested_by`.`name` AS person_requested
		, `person_assigned_to`.`name` AS person_assinged_to
	FROM ticket ticket
	LEFT JOIN `ticket_group` `ticket_group` ON `ticket`.`ticket_group_id` = `ticket_group`.`id`
	LEFT JOIN `person` `person` ON `ticket`.`created_by` = `person`.`id`
	LEFT JOIN `person` `person_updated_by` ON `ticket`.`updated_by` = `person_updated_by`.`id`
	LEFT JOIN `person` `person_approved_by` ON `ticket`.`approved_by` = `person_approved_by`.`id`
	LEFT JOIN `person` `person_assigned_to` ON `ticket`.`assigned_to` = `person_assigned_to`.`id`
	LEFT JOIN `ticket_status` `ticket_status` ON `ticket`.`ticket_status_id` = `ticket_status`.`id`
	LEFT JOIN `ticket_category` `ticket_category` ON `ticket`.`ticket_category_id` = `ticket_category`.`id`
	LEFT JOIN `person` `person_requested_by` ON `ticket`.`requested_by` = `person_requested_by`.`id`
	WHERE 1=1  AND ticket_group.id = ' . ((int)UrlParser::getId()).'

)l1 ');

        $ticket->addColumn(new Column('ticket_id', 'Id', true));
        $ticket->addColumn(new Column('ticket_subject', 'Subject', true));
        $ticket->addColumn(new Column('created_by', 'Created By', true));
        $ticket->addColumn(new Column('ticket_created_on', 'Created On', true));
        $ticket->addColumn(new Column('ticket_status', 'Ticket Status', true));
        $ticket->addColumn(new Column('ticket_category', 'Ticket Category', true));
        $ticket->addColumn(new Column('person_requested', 'Requested By', true));
        $ticket->addColumn(new Column('person_assinged_to', 'Assigned To', true));


        if ($ticket->isReadyToHandleRequests()) {
            $ticket->bootstrap();
        }


        $tabItem = new TabItem('Ticket');
        $tabItem->addComponent(new HtmlContainer($ticket->draw()));
        $tabContainer->addComponent($tabItem);


        $page2 = new AdminPage();
        $page2->setTitle('Related information')
            ->addComponent(new HtmlContainer($tabContainer->draw()));
        $html->addComponent($page2);
        echo $html->draw();
        break;
    case 'list':
    default:
        $grid = new PhpGrid('ticket_group_list');
        $grid->setTitle('ticket_group List')
            ->setRowsPerPage(20)
            ->setSqlQuery('
SELECT * FROM (
	SELECT
		  `ticket_group`.`id` AS ticket_group_id
		, `ticket_group`.`label` AS ticket_group_label
		, `ticket_group`.`created_on` AS ticket_group_created_on
		, `ticket_group`.`created_by` AS ticket_group_created_by
		, `person`.`name` AS person_name
	FROM ticket_group ticket_group
	LEFT JOIN `person` `person` ON `ticket_group`.`created_by` = `person`.`id`
	WHERE 1=1 
)l1 ');

        $grid->addColumn(((new Column('ticket_group_id', 'Id', true, true, sprintf('?module=%s&action=view&id={ticket_group_id}', UrlParser::getModule())))->setInnerElementCssClass('btn btn-sm btn-outline-success'))->setOuterElementCssStyle('width:100px;'));
        $grid->addColumn(new Column('ticket_group_label', 'Label', true));
        $grid->addColumn(new Column('ticket_group_created_on', 'Created On', true));
        $grid->addColumn(new Column('ticket_group_created_by', 'Created ById', false));
        $grid->addColumn(new Column('person_name', 'Created By', true));

        $grid->addActionButton(new ActionButton('View', sprintf('?module=%s&action=view&id={ticket_group_id}', UrlParser::getModule()), 'fa fa-eye'));
        $grid->addActionButton(new ActionButton('Update', sprintf('?module=%s&action=update&id={ticket_group_id}', UrlParser::getModule()), 'fa fa-edit'));
        $deleteLink = new ActionButton('Delete', sprintf('?module=%s&action=delete&id={ticket_group_id}', UrlParser::getModule()), 'fa fa-trash');
        $deleteLink->addAttribute('onclick', "return confirm('Are you sure you want to delete this?')");
        $grid->addActionButton($deleteLink);

        if ($grid->isReadyToHandleRequests()) {
            $grid->bootstrap();
        }

        $page->addComponent(new HtmlContainer($grid->draw()));
        $page->addLink(new Link('Add new', UrlParser::getNewLink(), 'fa fa-plus-square', [], ['class' => 'btn btn-sm btn-outline-success']));
        $page->setContainerType(ContainerType::TYPE_FLUID);
        $html->addComponent($page);
        echo $html->draw();
        break;
}
